clear all, clc, close all

set(0,'DefaultTextFontSize',18)
set(0,'DefaultLineLineWidth',2);
set(0,'DefaultTextInterpreter','latex')
set(0,'DefaultAxesFontSize',16)

%% scenario settings (4000x4000 m)
parameters.xmin = -2000; parameters.ymin = -2000;
parameters.xmax =  2000; parameters.ymax =  2000;

%% position of the Access Points
parameters.numberOfAP = 8;
% [ AP ] = generatePositionOfAP(parameters);

%% position of the user
UE = [0,0];

%% accuracies
parameters.sigmaTOA = 20; %m
parameters.sigmaAOA = deg2rad(10); %deg

%% create a grid of evaluation points
x = linspace(parameters.xmin,parameters.xmax,1000);
y = linspace(parameters.ymin,parameters.ymax,1000);

%% build covariance matrix
% TYPE='TOA';
% [R] = BuildCovarianceMatrix(parameters,TYPE);

%% load measurements

load('Task1a_rhoUEAP.mat')

rho=rhoUEAP;

%% compute likelihood for each AP in each evaluation point
%  without noise (rho = rho_measured = real_distance (AP,u))
likelihood = zeros(parameters.numberOfAP,length(x),length(y), 2);


for a = 1:parameters.numberOfAP

    %evaluate the likelihood in each evaluation point and then find the u
    %that maximize the likelihood
    for i=1:length(x)
        for j=1:length(y)

                    % of AP a, in point x(i),y(j), paramters (sigmaTOA,
                    %  rho = di, AP(a,:) position of AP, point x(i),y(j))
                    likelihood(a,i,j,1) = evaluateLikelihoodTOA(parameters,rho(a,1),UE,[x(i),y(j)]);

                    likelihood(a,i,j,2) = evaluateLikelihoodAOA(parameters,rho(a,2),UE,[x(i),y(j)]);

        end %j
    end %i
end %a  

%% compute "global" ML likelihood
totalLikelihood = zeros(parameters.numberOfAP, length(x),length(y));

% Multiply every likelihood(AP) and then normalize
for a = 1:parameters.numberOfAP
    %totalLikelihood(a) = totalLikelihood.*squeeze(likelihood(a,:,:));
    totalLikelihood(a,:,:) = squeeze(likelihood(a,:,:,1).*likelihood(a,:,:,2));
    totalLikelihood(a) = totalLikelihood(a)./sum(sum(totalLikelihood(a)));
end


%% plot likelihood 2D
fig = figure(); hold on
%fig.WindowState = 'maximized';
for a = 1:parameters.numberOfAP
    %imagesc(x,y,squeeze(likelihood(a,:,:,1))');
    %imagesc(x,y,squeeze(likelihood(a,:,:,2))');
    imagesc(x,y,squeeze(totalLikelihood(a,:,:))');
    
    %plot( AP(:,1) , AP(:,2) , '^','MarkerSize',10,'MarkerEdgeColor',[147,0,0]./255,'MarkerFaceColor',[147,0,0]./255)
    %plot( AP(a,1) , AP(a,2) , '^','MarkerSize',10,'MarkerEdgeColor',[102,254,0]./255,'MarkerFaceColor',[102,254,0]./255)
    plot( UE(:,1) , UE(:,2) , 'o','MarkerSize',10,'MarkerEdgeColor',[0, 254, 207]./255,'MarkerFaceColor',[0, 254, 207]./255)
    colorbar;
    xlabel('[m]'), ylabel('[m]');
    xlim([parameters.xmin parameters.xmax])
    ylim([parameters.ymin parameters.ymax])
    axis equal
    title(['Likelihood with TOA and AOA',' , $\sigma $ = ',num2str(parameters.sigmaTOA),' m ',' , $\sigma $ = ',num2str(rad2deg(parameters.sigmaAOA)),' deg '],'Interpreter','Latex')

    pause
end



%% plot ML in 3D
fig = figure(); hold on
%fig.WindowState = 'maximized';
for a = 1:parameters.numberOfAP
    %fig.WindowState = 'maximized';
    surf(  x, y , totalLikelihood(a,:,:) ),hold on
    shading flat
    colorbar;
    xlabel('[m]'), ylabel('[m]');

    title(['Likelihood with TOA and AOA',' , $\sigma $ = ',num2str(parameters.sigmaTOA),' m ',' , $\sigma $ = ',num2str(rad2deg(parameters.sigmaAOA)),' deg '],'Interpreter','Latex')
    pause
end


%% evaluate the ML
maxValue = zeros (parameters.numberOfAP);
for a = 1:parameters.numberOfAP
    
    maxValue(a) = max(totalLikelihood(a,:));
    [xhat yhat] = find(totalLikelihood == maxValue);
    uhat(1,1) = x(xhat);
    uhat(1,2) = y(yhat)
    %uhat should be the closest evaluation point to UE as we have no noise

end


% 
% 
% %% non-linear least square (NLS) estimation
% parameters.NiterMax = 100;
% [uHat,numberOfPerformedIterations] = iterativeNLS(parameters,AP,TYPE,R,rho);
% 
% %% plot scenario and estimate UE position
% fig = figure(); hold on
% %fig.WindowState = 'maximized';
% plot( AP(:,1) , AP(:,2) , '^','MarkerSize',10,'MarkerEdgeColor',[147,0,0]./255,'MarkerFaceColor',[147,0,0]./255)
% plot(uHat(1:numberOfPerformedIterations,1),uHat(1:numberOfPerformedIterations,2),'-s','MarkerEdgeColor',[0, 0, 160]./255,'MarkerFaceColor',[0, 0, 160]./255)
% legend('AP','NLS')
% xlabel('[m]'), ylabel('[m]');
% xlim([parameters.xmin parameters.xmax])
% ylim([parameters.ymin parameters.ymax])
% axis equal
% grid on
% switch TYPE
%     case 'TOA'
%         title(['',num2str(TYPE),', $N_{AP}$ = ',num2str(parameters.numberOfAP),' , $\sigma $ = ',num2str(parameters.sigmaTOA),'m'],'Interpreter','Latex')
%     case 'AOA'
%         title(['',num2str(TYPE),', $N_{AP}$ = ',num2str(parameters.numberOfAP),' , $\sigma $ = ',num2str(rad2deg(parameters.sigmaAOA)),'deg'],'Interpreter','Latex')
% end
% 
% %% perform MonteCarlo simulations
% parameters.numberOfMC = 1000;
% uHatMC = zeros(parameters.numberOfMC,2);
% for imc = 1:parameters.numberOfMC
%     
%     switch TYPE
% 
%         case 'TOA'
%             
%             rho=rho_TOA_3AP(imc,:);
% 
%         case 'AOA'
%             
%             rho=rho_AOA_3AP(imc,:);
%     end 
%     
%     [uHat,numberOfPerformedIterations] = iterativeNLS(parameters,AP,TYPE,R,rho);
%     uHatMC(imc,:) = uHat(numberOfPerformedIterations,:);
% end
% 
% % uHatMC(i,:) is the result (uHat(last)) of NLS estimation number i
% 
% %% plot all the estimated values
% close all
% fig = figure; hold on
% %fig.WindowState = 'maximized';
% plot( AP(:,1) , AP(:,2) , '^','MarkerSize',10,'MarkerEdgeColor',[147,0,0]./255,'MarkerFaceColor',[147,0,0]./255)
% plot(uHatMC(:,1),uHatMC(:,2),'.','color',[255,174,0]./255)
% legend('AP','NLS')
% xlim([parameters.xmin parameters.xmax])
% ylim([parameters.ymin parameters.ymax])
% xlabel('[m]'), ylabel('[m]');
% grid on
% axis equal
% 
% %% UE estimated position
% uhat = mean(uHatMC)
% 
